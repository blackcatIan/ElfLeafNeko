
#reverseLink web.xml prop002
#特别说明：log4j.properties必须放在classpath目录下
#除非你觉得单元测试的时候特地设置个文件路径不麻烦（spring的test插件会跳过web.xml的配置路径读取默认的classpath路径）


#参数根配置，级别，输出者1，输出者2.....
log4j.rootCategory=INFO,file,console
#输出者1每日产生一个日志
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
# ' . ' yyyy - MM: 每个月更新一个log日志 
# ' . ' yyyy - ww: 每个星期更新一个log日志 
# ' . ' yyyy - MM - dd: 每天更新一个log日志 
# ' . ' yyyy - MM - dd - a: 每天的午夜和正午更新一个log日志 
# ' . ' yyyy - MM - dd - HH: 每小时更新一个log日志 
# ' . ' yyyy - MM - dd - HH - mm: 每分钟更新一个log日志
log4j.appender.file.DatePattern='_'yyyy-MM-dd.'.log'
#输出文件目录及文件
log4j.appender.file.File=${catalina.base}/logs/tomcat_logs/NekoQQ_run.log
#对日志不断追加续写
log4j.appender.file.Append=true
#日志布局格式
log4j.appender.file.layout=org.apache.log4j.PatternLayout
#日志输出格式
log4j.appender.file.layout.ConversionPattern=[%p] %d{yyyy-MM-dd HH:mm:ss,SSS}%n method:%l%n log:%m%n%n
#ConversionPattern参数的格式含义 
#格式名 含义 
#%c 输出日志信息所属的类的全名 
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28 
#%f 输出日志信息所属的类的类名 
#%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 
#%m 输出代码中指定的信息，如log(message)中的message 
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推 
#%r 输出自应用启动到输出该日志信息所耗费的毫秒数 
#%t 输出产生该日志事件的线程名

#console is set to be a ConsoleAppender
log4j.appender.console = org.apache.log4j.ConsoleAppender
#console have four patterns
#org.apache.log4j.HTMLLayout
#org.apache.log4j.PatternLayout
#org.apache.log4j.SimpleLayout
#org.apache.log4j.TTCCLayout
log4j.appender.console.layout = org.apache.log4j.PatternLayout
#define the output type
log4j.appender.console.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%c]-[%p] %m%n
